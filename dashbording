from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import pandas as pd

# Данные, которые можно редактировать вручную
data = {
    'date': ['Февраль 1', 'Март 1', 'Апрель 1', 'Май 1', 'Июнь 1'],
    'income': [20000, 30000, 40000, 50000, 60000],  # Доходы
    'expenses': [10000, 15000, 20000, 25000, 30000]  # Расходы
}

# Создание DataFrame
df = pd.DataFrame(data)

# Рассчёт прибыли (доходы - расходы)
df['profit'] = df['income'] - df['expenses']

# Рассчёт общего дохода и расходов
total_income = df['income'].sum()
total_expenses = df['expenses'].sum()

# Рассчёт процентного соотношения для каждого месяца
df['income_percentage'] = (df['income'] / total_income) * 100
df['expenses_percentage'] = (df['expenses'] / total_expenses) * 100

# Данные для гистограммы распределения прибыли
profit_data = {
    'Прибыль': [10000, 15000, 20000, 25000, 30000],  # Прибыль
    'Количество': [1, 1, 1, 1, 1]  # Количество случаев
}
df_profit = pd.DataFrame(profit_data)

# Создание Dash-приложения
app = Dash(__name__)

# Макет приложения
app.layout = html.Div([
    html.H1(children='Анализ доходов, расходов и прибыли', style={'textAlign': 'center'}),

    # Линейный график динамики доходов и расходов
    html.H3("Динамика доходов и расходов"),
    dcc.Graph(id='line-graph'),

    # Круговой график структуры доходов и расходов
    html.H3("Структура доходов и расходов за все месяцы"),
    dcc.Graph(id='pie-graph'),

    # Гистограмма распределения прибыли
    html.H3("Распределение прибыли"),
    dcc.Graph(id='bar-graph'),

    # Точечный график корреляции между расходами и прибылью
    html.H3("Корреляция между расходами и прибылью"),
    dcc.Graph(id='scatter-graph')
])


# Callback для обновления линейного графика
@callback(
    Output('line-graph', 'figure'),
    Input('line-graph', 'id')
)
def update_line_graph(_):
    fig = px.line(
        df,
        x='date',
        y=['income', 'expenses'],  # Линии для доходов и расходов
        title='Динамика доходов и расходов',
        labels={'value': 'Сумма (в долларах)', 'date': 'Дата'},  # Подписи осей
        markers=True  # Добавить маркеры на линии
    )
    fig.update_traces(line=dict(width=2))  # Толщина линий
    fig.update_layout(legend_title_text='Тип значений')  # Заголовок легенды
    return fig


# Callback для обновления кругового графика
@callback(
    Output('pie-graph', 'figure'),
    Input('pie-graph', 'id')
)
def update_pie_graph(_):
    # Создание данных для кругового графика
    pie_data = {
        'Месяц': df['date'],
        'Доходы_процент': df['income_percentage'],
        'Расходы_процент': df['expenses_percentage']
    }
    df_pie = pd.DataFrame(pie_data)

    # Построение кругового графика
    fig = px.pie(
        df_pie,
        values='Доходы_процент',  # Используем проценты доходов
        names='Месяц',
        title='Структура доходов за все месяцы',
        hole=0.4  # Создаёт кольцевой график (опционально)
    )
    return fig


# Callback для обновления гистограммы распределения прибыли
@callback(
    Output('bar-graph', 'figure'),
    Input('bar-graph', 'id')
)
def update_bar_graph(_):
    fig = px.bar(
        df_profit,
        x='Прибыль',  # Ось X: Прибыль
        y='Количество',  # Ось Y: Количество случаев
        title='Гистограмма распределения прибыли',
        labels={'Прибыль': 'Прибыль (в долларах)', 'Количество': 'Количество случаев'},  # Подписи осей
        text='Количество',  # Отображение значений на столбцах
        color='Прибыль',  # Цвет столбцов в зависимости от прибыли
        color_continuous_scale='Viridis'  # Цветовая шкала
    )
    fig.update_traces(textposition='outside')  # Позиция текста на столбцах
    fig.update_layout(legend_title_text='Прибыль')  # Заголовок легенды
    return fig


# Callback для обновления точечного графика корреляции
@callback(
    Output('scatter-graph', 'figure'),
    Input('scatter-graph', 'id')
)
def update_scatter_graph(_):
    fig = px.scatter(
        df,
        x='expenses',  # Ось X: Расходы
        y='profit',  # Ось Y: Прибыль
        title='Корреляция между расходами и прибылью',
        labels={'expenses': 'Расходы (в долларах)', 'profit': 'Прибыль (в долларах)'},  # Подписи осей
        trendline='ols',  # Линия тренда (опционально)
        color='date',  # Цвет точек в зависимости от даты
        size='income',  # Размер точек в зависимости от доходов
        hover_name='date'  # Подсказка при наведении
    )
    fig.update_traces(marker=dict(line=dict(width=1, color='black')))  # Границы точек
    fig.update_layout(legend_title_text='Дата')  # Заголовок легенды
    return fig


# Запуск приложения
if __name__ == '__main__':
    app.run(debug=True)
